 Para implementar 
Bucket Sort
 para ordenar as notas de uma turma de alunos e Interpolation
 Search para encontrar um aluno com uma nota específica, vamos seguir as seguintes etapas:
Bucket Sort
 : Vamos usar o 
Bucket Sort
 para ordenar as notas. As notas serão distribuídas em
 baldes (ou buckets) e cada balde será ordenado individualmente, geralmente com um algoritmo
 simples como o 
Insertion Sort
 .
 Interpolation Search
 : Após as notas estarem ordenadas, usaremos o 
Interpolation Search
 para
 encontrar a posição de um aluno com uma nota específica. O 
Interpolation Search
 é eficiente
 quando os dados estão uniformemente distribuídos, o que é o caso aqui, já que as notas variam
 de 0 a 100.
 Passo 1: Implementação do Bucket Sort para Ordenação das Notas
 O 
Bucket Sort
 funciona bem para dados uniformemente distribuídos, como as notas dos alunos
 entre 0 e 100.
 def bucket_sort(arr):
 if not arr:
 return arr
 # Determina o número de baldes com base no tamanho da lista
    bucket_count = len(arr)
    max_value, min_value = max(arr), min(arr)
    bucket_range = (max_value - min_value) / bucket_count + 1
    buckets = [[] for _ in range(bucket_count)]
 # Distribui os elementos nos baldes
 for num in arr:
        index = int((num - min_value) // bucket_range)
        buckets[index].append(num)
 # Ordena cada balde usando Insertion Sort
    sorted_arr = []
 for bucket in buckets:
        sorted_arr.extend(sorted(bucket))  # Podemos usar sorted ou insertion sort aqui
 return sorted_arr
 Passo 2: Implementação do Interpolation Search para Buscar uma Nota Especí ca
 O
 Interpolation Search
 é mais eficiente quando os dados estão uniformemente distribuídos. Ele
 faz uma estimativa da posição da chave, tentando "interpolar" entre os valores mínimo e
 máximo.
 def interpolation_search(arr, target):
    low, high = 0, len(arr) - 1
 while low <= high and target >= arr[low] and target <= arr[high]:
 if low == high:
 if arr[low] == target:
 return low
 return -1
 # Interpolação para estimar a posição
        pos = low + ((target - arr[low]) * (high - low)) // (arr[high] - arr[low])
 # Verifica se encontramos a posição correta
 if arr[pos] == target:
return pos
 if arr[pos] < target:
            low = pos + 1
 else:
            high = pos - 1
 return -1
 Passo 3: Exemplo Prático
 Vamos agora criar uma lista de registros de alunos e suas respectivas
 notas, ordenar as notas com 
Bucket Sort
 e, em seguida, usar 
Interpolation Search
 para
 encontrar um aluno específico.
 # Lista de alunos com suas respectivas notas
 students = [
 {"Nome": "João", "Nota": 78},
 {"Nome": "Maria", "Nota": 95},
 {"Nome": "Carlos", "Nota": 63},
 {"Nome": "Ana", "Nota": 88},
 {"Nome": "Luiz", "Nota": 91},
 {"Nome": "Fernanda", "Nota": 84},
 {"Nome": "Pedro", "Nota": 70},
 {"Nome": "Juliana", "Nota": 85},
 ]
 # Extraindo apenas as notas
 notes = [student["Nota"] for student in students]
 # Ordenando as notas usando Bucket Sort
 sorted_notes = bucket_sort(notes)
 # Mostrando as notas ordenadas
 print("Notas ordenadas:", sorted_notes)
 # Função para encontrar o aluno com uma determinada nota
 def find_student_by_grade(sorted_notes, target_grade):
 # Usando Interpolation Search para encontrar a posição da nota
    index = interpolation_search(sorted_notes, target_grade)
 if index != -1:
 # Encontramos a nota, agora procuramos o aluno correspondente
 for student in students:
 if student["Nota"] == target_grade:
 return student
 return None
 # Exemplo de busca por uma nota específica
 target_grade = 88
 student = find_student_by_grade(sorted_notes, target_grade)
 if student:
 print(f"Aluno encontrado: {student['Nome']} com nota {student['Nota']}")
 else:
 print(f"Aluno com nota {target_grade} não encontrado.")
